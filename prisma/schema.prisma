// Prisma schema for StudyMatch
// Prisma CLI 6.x compatible

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  emailVerified DateTime?
  image     String?

  accounts  Account[]
  sessions  Session[]

  subjects  UserSubject[]
  createdPublicSubjects PublicSubject[] @relation("PublicSubjectAuthor")

  @@index([email])
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSubject {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  label     String
  level     Int?
  createdAt DateTime @default(now())

  @@index([userId, label])
  @@unique([userId, label])
}

model PublicSubject {
  id          String   @id @default(cuid())
  label       String   @unique
  level       Int?
  createdAt   DateTime @default(now())

  createdById String?
  createdBy   User?    @relation("PublicSubjectAuthor", fields: [createdById], references: [id])

  @@index([label])
}

enum MatchStatus {
  pending
  accepted
  rejected
}

enum Decision {
  pending
  accepted
  rejected
}

model Match {
  id        String      @id @default(cuid())
  aUserId   String
  bUserId   String
  topic     String
  score     Float
  status    MatchStatus @default(pending)
  createdAt DateTime    @default(now())

  // Per-user decisions
  aDecision Decision    @default(pending)
  bDecision Decision    @default(pending)

  @@index([aUserId])
  @@index([bUserId])
  @@index([topic])
  @@index([topic, aUserId, bUserId])
}
